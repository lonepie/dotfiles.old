"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: jon rogers
"             lonepie@gmail.com
"
" Version: 1.0 - 31/03/11 14:03:30
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Global
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" determine OS
fun! MySys()
    if has('win32') || has('win64')
        return "windows"
    elseif has('win32unix')
        return "cygwin"
    elseif has('macunix')
        return "mac"
    else
        return "linux"
    endif
endfun

if !exists("g:VIMFILES")
    let g:VIMFILES='$HOME/.vim'
endif

if MySys() == "windows"
	set rtp+=~/.vim/
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vundle (https://github.com/gmarik/vundle)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype off
set rtp+=~/.vim/vundle/
"execute 'set rtp+=' . g:VIMFILES . '/vundle/'
call vundle#rc()

"Bundle 'closetag.vim'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'taglist.vim'
Bundle 'IndexedSearch'
Bundle 'jQuery'
Bundle 'kwbdi.vim'
Bundle 'LustyExplorer'
Bundle 'LustyJuggler'
Bundle 'matchit.zip'
Bundle 'molokai'
Bundle 'QFixToggle'
"Bundle 'vimcommander'
"Bundle 'yaifa'
Bundle 'git://git.wincent.com/command-t.git'
Bundle 'git://github.com/Raimondi/delimitMate.git'
Bundle 'git://github.com/sjl/gundo.vim.git'
Bundle 'git://github.com/nanotech/jellybeans.vim'
Bundle 'git://github.com/fholgado/minibufexpl.vim'
Bundle 'git://github.com/Shougo/neocomplcache'
Bundle 'git://github.com/scrooloose/nerdcommenter'
Bundle 'git://github.com/scrooloose/nerdtree'
Bundle 'git://github.com/corntrace/bufexplorer'
Bundle 'git://github.com/altercation/vim-colors-solarized'
Bundle 'git://github.com/rygwdn/vim-conque'
Bundle 'git://github.com/Lokaltog/vim-easymotion'
Bundle 'git://github.com/tpope/vim-fugitive'
Bundle 'git://github.com/tpope/vim-git'
Bundle 'git://github.com/nathanaelkane/vim-indent-guides'
Bundle 'git://github.com/tpope/vim-ragtag'
Bundle 'git://github.com/jpo/vim-railscasts-theme'
Bundle 'git://github.com/tpope/vim-repeat'
Bundle 'git://github.com/tpope/vim-surround'
Bundle 'git://github.com/tpope/vim-unimpaired'
Bundle 'git://github.com/tpope/vim-vividchalk'
Bundle 'git://github.com/chrismetcalf/vim-yankring'
Bundle 'git://github.com/mattn/zencoding-vim'
Bundle 'git://github.com/sukima/xmledit.git'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"filetype off
" Pathogen
"if !exists("g:loaded_pathogen")
    "call pathogen#runtime_append_all_bundles()
    "call pathogen#helptags()
"endif

" Sets how many lines of history VIM has to remember
set history=700

" share windows clipboard
set clipboard+=unnamed

" use mouse everywhere
set mouse=a

" Enable filetype plugin
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

set ffs=unix,dos,mac "Default file types

set nocompatible
set shortmess=atI " shortens messages to avoid 'press a key' prompt 

if MySys() == "windows"
    set grepprg=grep\ -nH
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the curors - when moving vertical..
set so=7

set wildmenu "Turn on WiLd menu
set wildignore+=.git,.svn

set ruler "Always show current position

set cmdheight=2 "The commandbar height

set hid "Change buffer - without saving

set number "show line numbers

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching
set smartcase

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers
set nolazyredraw "Don't redraw while executing macros 

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

set foldenable " Turn on folding
set foldmethod=marker " Fold on the marker
set foldlevel=100 " Don't autofold anything (but I can still fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds 

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable "Enable syntax hl

set background=dark
if has('gui_running')
    let g:molokai_original = 1
    colorscheme molokai
    " colorscheme jellybeans
else
    if &term =~ '256color'
        set t_Co=256
        colorscheme tir_black   
    else
        colorscheme ir_black
    endif
endif

set encoding=utf8
try
    lang en_US
catch
endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"Persistent undo
try
    if MySys() == "windows"
      set undodir=C:\Windows\Temp
    else
      set undodir=~/.vim/undodir
    endif
    
    set undofile
catch
endtry


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noexpandtab
set tabstop=4
set shiftwidth=4
set tabstop=4
set smarttab

set lbr
set tw=500

set ai "Auto indent
set si "Smart indet
set nowrap "do not wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <c-space> ?

" turn off search highlight when pressing <esc>
map <silent> <leader><cr> :noh<cr>
if has("gui_running")
    nnoremap <silent> <esc> :noh<cr>
endif

" Smart way to move btw. windows
"map <C-j> <C-W>j
"map <C-k> <C-W>k
"map <C-h> <C-W>h
"map <C-l> <C-W>l

" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

""""""""""""""""""""""""""""""
" => Statusline
""""""""""""""""""""""""""""""
" Always show the statusline
set laststatus=2

" Format the statusline
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]

" function! CurDir()
"     let curdir = substitute(getcwd(), '/Users/jrogers/', "~/", "g")
"     return curdir
" endfunction
" 
" function! HasPaste()
"     if &paste
"         return 'PASTE MODE  '
"     else
"         return ''
"     endif
" endfunction
hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black

function! MyStatusLine(mode)
    let statusline=""
    if a:mode == 'Enter'
        let statusline.="%#StatColor#"
    endif
    let statusline.="\(%n\)\ %f\ "
    if a:mode == 'Enter'
        let statusline.="%*"
    endif
    let statusline.="%#Modified#%m"
    if a:mode == 'Leave'
        let statusline.="%*%r"
    elseif a:mode == 'Enter'
        let statusline.="%r%*"
    endif
    let statusline .= "\ (%l/%L,\ %c)\ %P%=%h%w\ %y\ [%{&encoding}:%{&fileformat}]\ \ "
    return statusline
endfunction

au WinEnter * setlocal statusline=%!MyStatusLine('Enter')
au WinLeave * setlocal statusline=%!MyStatusLine('Leave')
set statusline=%!MyStatusLine('Enter')

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi StatColor guibg=orange ctermbg=lightred
  elseif a:mode == 'r'
    hi StatColor guibg=#e454ba ctermbg=magenta
  elseif a:mode == 'v'
    hi StatColor guibg=#e454ba ctermbg=magenta
  else
    hi StatColor guibg=red ctermbg=red
  endif
endfunction 

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
au InsertLeave * hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Autocommands
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vb.net syntax
autocmd BufNewFile,BufRead *.vb set ft=vbnet
" tmux synax
autocmd BufNewFile,BufRead .tmux.conf set ft=tmux

au filetype help set nonumber      " no line numbers when viewing help
au filetype help nnoremap <buffer><cr> <c-]>   " Enter selects subject
au filetype help nnoremap <buffer><bs> <c-T>   " Backspace to go bac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" show quickfix window for current search
nnoremap <silent> <leader>gr :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Insert newline without entering insert mode
map <S-Enter> O<Esc>
map <CR> o<Esc>

" opposite of S-J
nnoremap <C-J> a<CR><Esc>k$

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType cs set omnifunc=syntaxcomplete#Complete
if has("ruby")
    autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

""""""""""""""""""""""""""""""
" => Minibuffer plugin
""""""""""""""""""""""""""""""
let g:miniBufExplModSelTarget = 1
let g:miniBufExplUseSingleClick = 1
let g:miniBufExplMapWindowNavVim = 1
let g:bufExplorerDefaultHelp = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERD Tree
map <up> <ESC>:NERDTreeToggle<RETURN>
map <c-up> <esc>:NERDTree<RETURN>
" NERD Commenter
map gcc <plug>NERDCommenterInvert
" Tlist
map <F4> :TlistToggle<cr><cr>
" Gundo
nnoremap <c-z> :GundoToggle<CR>
" Yankring
nnoremap <silent> <leader>yr :YRShow<CR>

" QFixToggle
map <leader>q :QFix<cr>

" on MacVim, map Command-T to actually use Apple-T
"if has("gui_macvim")
	"macmenu &File.New\ Tab key=<nop>
	"map <D-t> :CommandT<CR>
"endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indent_finder_enabled = 0
let g:yankring_history_dir = '' . g:VIMFILES

if MySys() == "windows"
  let Grep_Cygwin_Find = 1
  let Tlist_Ctags_Cmd = '$HOME/.vim/ctags.exe'
endif

" define additional comment types for tcomment
"if exists('loaded_tcomment')
    "call tcomment#DefineType('aspnet', '<%%-- %s --%%>')
    "call tcomment#DefineType('autohotkey', '; %s')
"endif

" CommandT options
let g:CommandTMaxHeight = 20

" delimitMate
"let loaded_delimitMate = 1
let delimitMate_matchpairs = "(:),[:],{:},<:>"
let delimitMate_balance_matchpairs = 1


" fuzzyfinder data directory
let g:fuf_dataDir = '' " blank means no data files

" define comment types for NERDCommenter
let g:NERDCustomDelimiters = {
            \ 'aspnet': { 'left': '<%--', 'right': '--%>' }
            \ }

" NERD tree
let NERDTreeIgnore=['^_svn$', '^\.svn$']
let NERDTreeHijackNetrw=1
let g:NERDShutUp = 1

"highlight Pmenu guibg=brown gui=bold
let g:LustyJugglerSuppressRubyWarning = 1
let g:user_zen_settings = {
            \  'php' : {
            \    'extends' : 'html',
            \    'filters' : 'c',
            \  },
            \  'xml' : {
            \    'extends' : 'html',
            \  },
            \}
let g:use_zen_complete_tag = 1
let g:ragtag_global_maps = 1

" easymotion mappings
let g:EasyMotion_mapping_t = '_tf'

" Xmledit
let loaded_xmledit = 1
let xml_use_xhtml = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Neocomplcache
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:neocomplcache_enable_at_startup = 1
if exists('g:neocomplcache_enable_at_startup') && g:neocomplcache_enable_at_startup == 1
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Use camel case completion.
    let g:neocomplcache_enable_camel_case_completion = 1
    " Use underbar completion.
    let g:neocomplcache_enable_underbar_completion = 1

    "let g:neocomplcache_auto_completion_start_length = 3
    "let g:neocomplcache_manual_completion_start_length = 3
    let g:neocomplcache_min_syntax_length = 3
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

    let g:neocomplcache_snippets_dir = globpath(&runtimepath, 'snippets/')
    " Define keyword.
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    imap <C-k>     <Plug>(neocomplcache_snippets_expand)
    smap <C-k>     <Plug>(neocomplcache_snippets_expand)
    inoremap <expr><C-g>     neocomplcache#undo_completion()
    inoremap <expr><C-l>     neocomplcache#complete_common_string()
    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    "inoremap <expr><CR>  (pumvisible() ? "\<C-y>":'') . "\<C-f>\<CR>X\<BS>"
    " <TAB>: completion. -- conflicts with snipMate
    "inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> pumvisible() ? neocomplcache#close_popup()."\<C-h>" : "\<C-h>"
    inoremap <expr><BS> pumvisible() ? neocomplcache#close_popup()."\<C-h>" : "\<C-h>"
    inoremap <expr><C-y>  neocomplcache#close_popup()
    inoremap <expr><C-e>  neocomplcache#cancel_popup()
    "AutoComplPop like behavior.
    "let g:neocomplcache_enable_auto_select = 1
    "inoremap <expr><CR>  (pumvisible() ? "\<C-e>":'') . (&indentexpr != '' ? "\<C-f>\<CR>X\<BS>":"\<CR>")
    "inoremap <expr><C-h> pumvisible() ? "\<C-e>\<C-h>" : "\<C-h>"
    "inoremap <expr><BS> pumvisible() ? "\<C-e>\<C-h>" : "\<C-h>"
    "let g:neocomplcache_snippets_dir = globpath(&runtimepath, 'snippets/')
    "au FileType * let g:neocomplcache_snippets_dir = globpath(&runtimepath, 'snippets/' . &ft)
    "au FileType php let g:neocomplcache_snippets_dir .= ',' . globpath(&runtimepath, 'snippets/html')
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Fast editing of the .vimrc
map <leader>ev :exec "e " . g:VIMFILES . "/vimrc"<cr>

" When vimrc is edited, reload it
if MySys() == "windows"
    autocmd! bufwritepost vimrc source ~/_vimrc "exec 'source ' . g:VIMFILES . '/vimrc'
else
    autocmd! bufwritepost vimrc source ~/.vimrc
endif

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" start->run the current file
if MySys() == "windows"
    nmap <silent> <Leader>x :silent ! start "1" "%:p"<CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => GVIMRC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('gui_running')
    exec 'source ' . g:VIMFILES . '/gvimrc'
endif
